
TWI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4c  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000803  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  88:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Master_Init>:
#include "I2C.h"

//******************************************************************************************************************
//FUNCION PARA INICIALIZAR I2C Maestro
//******************************************************************************************************************
void I2C_Master_Init(unsigned long SCL_CLOCK, uint8_t Prescaler){
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	8b 01       	movw	r16, r22
  98:	9c 01       	movw	r18, r24
  9a:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5));	//Se configuran los pines de I2C como entradas
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 7c       	andi	r24, 0xCF	; 207
  a0:	87 b9       	out	0x07, r24	; 7

	switch(Prescaler){
  a2:	44 30       	cpi	r20, 0x04	; 4
  a4:	79 f0       	breq	.+30     	; 0xc4 <I2C_Master_Init+0x34>
  a6:	18 f4       	brcc	.+6      	; 0xae <I2C_Master_Init+0x1e>
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	31 f0       	breq	.+12     	; 0xb8 <I2C_Master_Init+0x28>
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <I2C_Master_Init+0x64>
  ae:	40 31       	cpi	r20, 0x10	; 16
  b0:	91 f0       	breq	.+36     	; 0xd6 <I2C_Master_Init+0x46>
  b2:	40 34       	cpi	r20, 0x40	; 64
  b4:	c9 f0       	breq	.+50     	; 0xe8 <I2C_Master_Init+0x58>
  b6:	1e c0       	rjmp	.+60     	; 0xf4 <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
  b8:	e9 eb       	ldi	r30, 0xB9	; 185
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	80 83       	st	Z, r24
		break;
  c2:	1e c0       	rjmp	.+60     	; 0x100 <I2C_Master_Init+0x70>
		
		case 4:
			TWSR &= ~(1<<TWPS1);
  c4:	e9 eb       	ldi	r30, 0xB9	; 185
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
		break;
  d4:	15 c0       	rjmp	.+42     	; 0x100 <I2C_Master_Init+0x70>
		
		case 16:
			TWSR &= ~(1<<TWPS0);
  d6:	e9 eb       	ldi	r30, 0xB9	; 185
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS1);
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
		break;
  e6:	0c c0       	rjmp	.+24     	; 0x100 <I2C_Master_Init+0x70>
		
		case 64:
			TWSR |= ((1<<TWPS1)|(1<<TWPS0));
  e8:	e9 eb       	ldi	r30, 0xB9	; 185
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	80 83       	st	Z, r24
		break;
  f2:	06 c0       	rjmp	.+12     	; 0x100 <I2C_Master_Init+0x70>
		
		default:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
  f4:	e9 eb       	ldi	r30, 0xB9	; 185
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8c 7f       	andi	r24, 0xFC	; 252
  fc:	80 83       	st	Z, r24
			Prescaler = 1;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
		break;
		
	}
	
	TWBR = ((F_CPU/SCL_CLOCK)-16)/(2*Prescaler);		//MUST ...
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	74 e2       	ldi	r23, 0x24	; 36
 104:	84 ef       	ldi	r24, 0xF4	; 244
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	a9 01       	movw	r20, r18
 10a:	98 01       	movw	r18, r16
 10c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodsi4>
 110:	ca 01       	movw	r24, r20
 112:	b9 01       	movw	r22, r18
 114:	60 51       	subi	r22, 0x10	; 16
 116:	71 09       	sbc	r23, r1
 118:	81 09       	sbc	r24, r1
 11a:	91 09       	sbc	r25, r1
 11c:	4c 2f       	mov	r20, r28
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	9a 01       	movw	r18, r20
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	03 2e       	mov	r0, r19
 128:	00 0c       	add	r0, r0
 12a:	44 0b       	sbc	r20, r20
 12c:	55 0b       	sbc	r21, r21
 12e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodsi4>
 132:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	80 83       	st	Z, r24

}
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <I2C_Master_Start>:
//FUNCION PARA EL INICIO DE LA COMUNICACIÓN I2C
//******************************************************************************************************************

void I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		//Se configura la condición de Start
 148:	84 ea       	ldi	r24, 0xA4	; 164
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));		//Espera a que termine la bandera TWINT
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	88 23       	and	r24, r24
 154:	e4 f7       	brge	.-8      	; 0x14e <I2C_Master_Start+0x6>
}
 156:	08 95       	ret

00000158 <I2C_Master_Stop>:
//******************************************************************************************************************
//FUNCION PARA LA PARADA DE LA COMUNICACIÓN I2C
//******************************************************************************************************************

void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO);		//Inicia la secuancia de parada del STOP
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15e:	08 95       	ret

00000160 <I2C_Master_Write>:
//*****************************************************************************************************************

uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado;

	TWDR = dato; // Cargar el dato
 160:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1 << TWEN)|(1 << TWINT); // Inicia el envio
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	while(!(TWCR & (1 << TWINT))); // Espera al flag TWINT
 16a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 16e:	88 23       	and	r24, r24
 170:	e4 f7       	brge	.-8      	; 0x16a <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8;		// Verificar estado
 172:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 176:	88 7f       	andi	r24, 0xF8	; 248
	
	// Verificar si se transmitio una SLA + W con ACK, SLA + R con ACK, o un Dato con ACK
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 178:	88 31       	cpi	r24, 0x18	; 24
 17a:	31 f0       	breq	.+12     	; 0x188 <I2C_Master_Write+0x28>
 17c:	88 32       	cpi	r24, 0x28	; 40
 17e:	31 f0       	breq	.+12     	; 0x18c <I2C_Master_Write+0x2c>
 180:	80 34       	cpi	r24, 0x40	; 64
 182:	29 f4       	brne	.+10     	; 0x18e <I2C_Master_Write+0x2e>
		return 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	08 95       	ret
 18c:	81 e0       	ldi	r24, 0x01	; 1
		}else{
		return estado;

	}
}
 18e:	08 95       	ret

00000190 <refreshPORT>:
	DDRB |=(1 << DDB5);
}


void refreshPORT(uint8_t valor){
	if(valor & 0b10000000){
 190:	88 23       	and	r24, r24
 192:	24 f4       	brge	.+8      	; 0x19c <refreshPORT+0xc>
		PORTD |=(1 << PORTD5);
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	90 62       	ori	r25, 0x20	; 32
 198:	9b b9       	out	0x0b, r25	; 11
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <refreshPORT+0x12>
		}else{
		PORTD &= ~(1 << PORTD5);
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	9f 7d       	andi	r25, 0xDF	; 223
 1a0:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b01000000){
 1a2:	86 ff       	sbrs	r24, 6
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <refreshPORT+0x1e>
		PORTD |=(1 << PORTD4);
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	90 61       	ori	r25, 0x10	; 16
 1aa:	9b b9       	out	0x0b, r25	; 11
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <refreshPORT+0x24>
		}else{
		PORTD &= ~(1 << PORTD4);
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	9f 7e       	andi	r25, 0xEF	; 239
 1b2:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00100000){
 1b4:	85 ff       	sbrs	r24, 5
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <refreshPORT+0x30>
		PORTD |= (1 << PORTD3);
 1b8:	9b b1       	in	r25, 0x0b	; 11
 1ba:	98 60       	ori	r25, 0x08	; 8
 1bc:	9b b9       	out	0x0b, r25	; 11
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <refreshPORT+0x36>
		}else{
		PORTD &= ~(1 << PORTD3);
 1c0:	9b b1       	in	r25, 0x0b	; 11
 1c2:	97 7f       	andi	r25, 0xF7	; 247
 1c4:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00010000){
 1c6:	84 ff       	sbrs	r24, 4
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <refreshPORT+0x42>
		PORTD |= (1 << PORTD2);
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	94 60       	ori	r25, 0x04	; 4
 1ce:	9b b9       	out	0x0b, r25	; 11
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <refreshPORT+0x48>
		}else{
		PORTD &= ~(1 << PORTD2);
 1d2:	9b b1       	in	r25, 0x0b	; 11
 1d4:	9b 7f       	andi	r25, 0xFB	; 251
 1d6:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00001000){
 1d8:	83 ff       	sbrs	r24, 3
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <refreshPORT+0x54>
		PORTC |= (1 << PORTC3);
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	98 60       	ori	r25, 0x08	; 8
 1e0:	98 b9       	out	0x08, r25	; 8
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <refreshPORT+0x5a>
		}else{
		PORTC &= ~(1 << PORTC3);
 1e4:	98 b1       	in	r25, 0x08	; 8
 1e6:	97 7f       	andi	r25, 0xF7	; 247
 1e8:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000100){
 1ea:	82 ff       	sbrs	r24, 2
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <refreshPORT+0x66>
		PORTC |= (1 << PORTC2);
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	94 60       	ori	r25, 0x04	; 4
 1f2:	98 b9       	out	0x08, r25	; 8
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <refreshPORT+0x6c>
		}else{
		PORTC &= ~(1 << PORTC2);
 1f6:	98 b1       	in	r25, 0x08	; 8
 1f8:	9b 7f       	andi	r25, 0xFB	; 251
 1fa:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000010){
 1fc:	81 ff       	sbrs	r24, 1
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <refreshPORT+0x78>
		PORTC |= (1 << PORTC1);
 200:	98 b1       	in	r25, 0x08	; 8
 202:	92 60       	ori	r25, 0x02	; 2
 204:	98 b9       	out	0x08, r25	; 8
 206:	03 c0       	rjmp	.+6      	; 0x20e <refreshPORT+0x7e>
		}else{
		PORTC &= ~(1 << PORTC1);
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	9d 7f       	andi	r25, 0xFD	; 253
 20c:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000001){
 20e:	80 ff       	sbrs	r24, 0
 210:	04 c0       	rjmp	.+8      	; 0x21a <refreshPORT+0x8a>
		PORTC |= (1 << PORTC0);
 212:	88 b1       	in	r24, 0x08	; 8
 214:	81 60       	ori	r24, 0x01	; 1
 216:	88 b9       	out	0x08, r24	; 8
 218:	08 95       	ret
		}else{
		PORTC &= ~(1 << PORTC0);
 21a:	88 b1       	in	r24, 0x08	; 8
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	88 b9       	out	0x08, r24	; 8
 220:	08 95       	ret

00000222 <init_setup>:
//FUNCIONES
//******************************************************************************************************************

void init_setup(void){
	// Salidas
	DDRC |=(1 << DDC0)|(1 << DDC1)|(1 << DDC2)|(1 << DDC3);
 222:	87 b1       	in	r24, 0x07	; 7
 224:	8f 60       	ori	r24, 0x0F	; 15
 226:	87 b9       	out	0x07, r24	; 7
	DDRD |=(1 << DDD2)|(1 << DDD3)|(1 << DDD4)|(1 << DDD5);
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	8c 63       	ori	r24, 0x3C	; 60
 22c:	8a b9       	out	0x0a, r24	; 10
	refreshPORT(0);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 c8 00 	call	0x190	; 0x190 <refreshPORT>
	DDRB |=(1 << DDB5);
 234:	84 b1       	in	r24, 0x04	; 4
 236:	80 62       	ori	r24, 0x20	; 32
 238:	84 b9       	out	0x04, r24	; 4
 23a:	08 95       	ret

0000023c <main>:
//LOOP
//******************************************************************************************************************

int main(void)
{
 I2C_Master_Init(1000,1); //Se inicializa como maestro Fscl 100Hz, prescaler 1
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	68 ee       	ldi	r22, 0xE8	; 232
 240:	73 e0       	ldi	r23, 0x03	; 3
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Master_Init>
 init_setup(); //Se inicializan los puertos
 24a:	0e 94 11 01 	call	0x222	; 0x222 <init_setup>
 
    while (1) 
    {
		
		PORTB|=(1 << PORTB5);
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	80 62       	ori	r24, 0x20	; 32
 252:	85 b9       	out	0x05, r24	; 5

		I2C_Master_Start();
 254:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_Master_Start>
		// Escritura
		bufferI2C = slave1 << 1 & 0b11111110;
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferI2C>

		temp = I2C_Master_Write(bufferI2C);
 25e:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_Master_Write>
 262:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp>
		if(temp != 1){
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	19 f0       	breq	.+6      	; 0x270 <main+0x34>
			I2C_Master_Stop();
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Master_Stop>
 26e:	05 c0       	rjmp	.+10     	; 0x27a <main+0x3e>
		}else{
			I2C_Master_Write('R');
 270:	82 e5       	ldi	r24, 0x52	; 82
 272:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_Master_Write>
			I2C_Master_Stop();
 276:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Master_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	89 e6       	ldi	r24, 0x69	; 105
 27e:	98 e1       	ldi	r25, 0x18	; 24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x44>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x4e>
 28a:	00 00       	nop
		}

		_delay_ms(500);

		PORTB &= ~(1 << PORTB5);
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	85 b9       	out	0x05, r24	; 5
		I2C_Master_Start();
 292:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_Master_Start>
		// Lectura
		bufferI2C = slave1 << 1 | 0b00000001;
 296:	81 e6       	ldi	r24, 0x61	; 97
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferI2C>
		
		temp = I2C_Master_Write(bufferI2C);
 29c:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_Master_Write>
 2a0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp>
		if(temp != 1){
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	11 f0       	breq	.+4      	; 0x2ac <main+0x70>
			I2C_Master_Stop();
 2a8:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Master_Stop>
		}

		TWCR=(1 << TWINT)|(1 << TWEN);
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1 << TWINT)));
 2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b6:	88 23       	and	r24, r24
 2b8:	e4 f7       	brge	.-8      	; 0x2b2 <main+0x76>

		valorI2C= TWDR;
 2ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		I2C_Master_Stop();
 2c2:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Master_Stop>

		refreshPORT(valorI2C);
 2c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	0e 94 c8 00 	call	0x190	; 0x190 <refreshPORT>
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	89 e6       	ldi	r24, 0x69	; 105
 2d2:	98 e1       	ldi	r25, 0x18	; 24
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x98>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xa2>
 2de:	00 00       	nop
 2e0:	b6 cf       	rjmp	.-148    	; 0x24e <main+0x12>

000002e2 <__udivmodsi4>:
 2e2:	a1 e2       	ldi	r26, 0x21	; 33
 2e4:	1a 2e       	mov	r1, r26
 2e6:	aa 1b       	sub	r26, r26
 2e8:	bb 1b       	sub	r27, r27
 2ea:	fd 01       	movw	r30, r26
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__udivmodsi4_ep>

000002ee <__udivmodsi4_loop>:
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	ee 1f       	adc	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	a2 17       	cp	r26, r18
 2f8:	b3 07       	cpc	r27, r19
 2fa:	e4 07       	cpc	r30, r20
 2fc:	f5 07       	cpc	r31, r21
 2fe:	20 f0       	brcs	.+8      	; 0x308 <__udivmodsi4_ep>
 300:	a2 1b       	sub	r26, r18
 302:	b3 0b       	sbc	r27, r19
 304:	e4 0b       	sbc	r30, r20
 306:	f5 0b       	sbc	r31, r21

00000308 <__udivmodsi4_ep>:
 308:	66 1f       	adc	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	1a 94       	dec	r1
 312:	69 f7       	brne	.-38     	; 0x2ee <__udivmodsi4_loop>
 314:	60 95       	com	r22
 316:	70 95       	com	r23
 318:	80 95       	com	r24
 31a:	90 95       	com	r25
 31c:	9b 01       	movw	r18, r22
 31e:	ac 01       	movw	r20, r24
 320:	bd 01       	movw	r22, r26
 322:	cf 01       	movw	r24, r30
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
