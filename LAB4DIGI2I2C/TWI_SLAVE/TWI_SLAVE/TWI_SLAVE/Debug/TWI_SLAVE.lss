
TWI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000988  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000598  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000273  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  88:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "ADC.h"
#include <avr/io.h>
//Configuración del ADC

void ADC_init(void) {
	ADMUX |= (1<<REFS0);	//Seleccionar el voltaje de referencia
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);	// Se define que se trabajara con 10 bits
  a0:	80 81       	ld	r24, Z
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	80 83       	st	Z, r24
	
	// Configuración Prescaler de 128 --> 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// Se enceinde el ADC y se activa su interruptor de igual forma
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Entradas para los potenciometros
	DIDR0 |= (1 << ADC0D);		// Desabilitar la entrada digital PC0
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ADC_read>:
}

uint16_t ADC_read(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;			//Seleccionar el canal del ADC
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);					// Se inicia la conversión de lo valores
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));				//Se espera hasta que la conversión se haya completado
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	86 fd       	sbrc	r24, 6
  de:	fc cf       	rjmp	.-8      	; 0xd8 <ADC_read+0x16>
	return(ADCH);							//Regresa el valor de ADC
  e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <I2C_Slave_Init>:
  e8:	97 b1       	in	r25, 0x07	; 7
  ea:	9f 7c       	andi	r25, 0xCF	; 207
  ec:	97 b9       	out	0x07, r25	; 7
  ee:	88 0f       	add	r24, r24
  f0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  f4:	85 e4       	ldi	r24, 0x45	; 69
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fa:	08 95       	ret

000000fc <main>:
//LOOP
//******************************************************************************************************************

int main(void)
{
	DDRB |=(1 << DDB5);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB5);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	85 b9       	out	0x05, r24	; 5
	ADC_init();
 108:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>

	I2C_Slave_Init(SlaveAddress);		//Se inicia el esclavo con la dirección del maestro designada
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Slave_Init>

	sei();		// Habilitar Interrupciones generales
 112:	78 94       	sei
 
    while (1) 
    {

		// Iniciando secuencia de adc
		valorADC = ADC_read(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(buffer == 'R'){
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buffer>
 122:	82 35       	cpi	r24, 0x52	; 82
 124:	b9 f7       	brne	.-18     	; 0x114 <main+0x18>
			PINB |= (1 << PINB5);
 126:	83 b1       	in	r24, 0x03	; 3
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	83 b9       	out	0x03, r24	; 3
			buffer = 0;
 12c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <buffer>
 130:	f1 cf       	rjmp	.-30     	; 0x114 <main+0x18>

00000132 <__vector_21>:

//******************************************************************************************************************
//INTERRUPCIONES
//******************************************************************************************************************

ISR(ADC_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//Limpiar la bandera al encender el ADC
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	80 83       	st	Z, r24
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_24>:


ISR(TWI_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 16c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 172:	80 38       	cpi	r24, 0x80	; 128
 174:	99 f0       	breq	.+38     	; 0x19c <__vector_24+0x40>
 176:	28 f4       	brcc	.+10     	; 0x182 <__vector_24+0x26>
 178:	80 36       	cpi	r24, 0x60	; 96
 17a:	51 f0       	breq	.+20     	; 0x190 <__vector_24+0x34>
 17c:	80 37       	cpi	r24, 0x70	; 112
 17e:	41 f0       	breq	.+16     	; 0x190 <__vector_24+0x34>
 180:	1f c0       	rjmp	.+62     	; 0x1c0 <__vector_24+0x64>
 182:	88 3a       	cpi	r24, 0xA8	; 168
 184:	a9 f0       	breq	.+42     	; 0x1b0 <__vector_24+0x54>
 186:	88 3b       	cpi	r24, 0xB8	; 184
 188:	99 f0       	breq	.+38     	; 0x1b0 <__vector_24+0x54>
 18a:	80 39       	cpi	r24, 0x90	; 144
 18c:	c9 f4       	brne	.+50     	; 0x1c0 <__vector_24+0x64>
 18e:	06 c0       	rjmp	.+12     	; 0x19c <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |=(1 << TWINT);
 190:	ec eb       	ldi	r30, 0xBC	; 188
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 68       	ori	r24, 0x80	; 128
 198:	80 83       	st	Z, r24
		break;
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 19c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		TWCR |= (1 << TWINT); // Se limpia la bandera
 1a4:	ec eb       	ldi	r30, 0xBC	; 188
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
		break;
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = valorADC; // Cargar el dato
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA); // Inicia el envio
 1b8:	85 ec       	ldi	r24, 0xC5	; 197
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <__vector_24+0x6e>
		default: // Se libera el bus de cualquier error
		TWCR |=(1 << TWINT)|(1 << TWSTO);
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 69       	ori	r24, 0x90	; 144
 1c8:	80 83       	st	Z, r24
		break;
	}
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
